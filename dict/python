--- complete-dict - Created by Ryan Kulla using Python 2.6 on Ubuntu Linux 9.04 on July 23rd 2009 ---

--- Python Keywords (These were manually inputted) ---
and
del
for
is
raise
assert
elif
from
lambda
return
break
else
global
not
try
class
except
if
or
while
continue
exec
import
pass
yield
def
finally
in
print

--- string type attributes and methods. (These were manually inputted). Only works with quotes not objects. eg 'foo'.startswith(  ---
.__add__
.__class__
.__contains__
.__delattr__
.__doc__
.__eq__
.__format__
.__ge__
.__getattribute__
.__getitem__
.__getnewargs__
.__getslice__
.__gt__
.__hash__
.__init__
.__le__
.__len__
.__lt__
.__mod__
.__mul__
.__ne__
.__new__
.__reduce__
.__reduce_ex__
.__repr__
.__rmod__
.__rmul__
.__setattr__
.__sizeof__
.__str__
.__subclasshook__
.capitalize(
.center(
.count(
.decode(
.encode(
.endswith(
.expandtabs(
.find(
.format(
.index(
.isalnum(
.isalpha(
.isdigit(
.islower(
.isspace(
.istitle(
.isupper(
.join(
.ljust(
.lower(
.lstrip(
.partition(
.replace(
.rfind(
.rindex(
.rjust(
.rpartition(
.rsplit(
.rstrip(
.split(
.splitlines(
.startswith(
.strip(
.swapcase(
.title(
.translate(
.upper(
.zfill(

--- from __builtin__ import * ---
ArithmeticError(
AssertionError(
AttributeError(
BaseException(
BufferError(
BytesWarning(
DeprecationWarning(
EOFError(
Ellipsis
EnvironmentError(
Exception(
False
FloatingPointError(
FutureWarning(
GeneratorExit(
IOError(
ImportError(
ImportWarning(
IndentationError(
IndexError(
KeyError(
KeyboardInterrupt(
LookupError(
MemoryError(
NameError(
None
NotImplemented
NotImplementedError(
OSError(
OverflowError(
PendingDeprecationWarning(
ReferenceError(
RuntimeError(
RuntimeWarning(
StandardError(
StopIteration(
SyntaxError(
SyntaxWarning(
SystemError(
SystemExit(
TabError(
True
TypeError(
UnboundLocalError(
UnicodeDecodeError(
UnicodeEncodeError(
UnicodeError(
UnicodeTranslateError(
UnicodeWarning(
UserWarning(
ValueError(
Warning(
ZeroDivisionError(
__debug__
__doc__
__import__(
__name__
__package__
abs(
all(
any(
apply(
basestring(
bin(
bool(
buffer(
bytearray(
bytes(
callable(
chr(
classmethod(
cmp(
coerce(
compile(
complex(
copyright(
credits(
delattr(
dict(
dir(
divmod(
enumerate(
eval(
execfile(
exit(
file(
filter(
float(
format(
frozenset(
getattr(
globals(
hasattr(
hash(
help(
hex(
id(
input(
int(
intern(
isinstance(
issubclass(
iter(
len(
license(
list(
locals(
long(
map(
max(
min(
next(
object(
oct(
open(
ord(
pow(
print(
property(
quit(
range(
raw_input(
reduce(
reload(
repr(
reversed(
round(
set(
setattr(
slice(
sorted(
staticmethod(
str(
sum(
super(
tuple(
type(
unichr(
unicode(
vars(
xrange(
zip(

--- import __main__ ---
__main__.PYDICTION_DICT
__main__.PYDICTION_DICT_BACKUP
__main__.STDOUT_ONLY
__main__.__author__
__main__.__builtins__
__main__.__copyright__
__main__.__doc__
__main__.__file__
__main__.__name__
__main__.__package__
__main__.__version__
__main__.answer
__main__.f
__main__.file_lines
__main__.get_submodules(
__main__.get_yesno(
__main__.line
__main__.main(
__main__.module_name
__main__.my_import(
__main__.os
__main__.remove_duplicates(
__main__.shutil
__main__.sys
__main__.types
__main__.write_dictionary(
__main__.write_to

--- from __main__ import * ---
PYDICTION_DICT
PYDICTION_DICT_BACKUP
STDOUT_ONLY
__author__
__copyright__
__version__
answer
f
file_lines
get_submodules(
get_yesno(
line
main(
module_name
my_import(
os
remove_duplicates(
shutil
sys
types
write_dictionary(
write_to


--- from os import * ---
EX_CANTCREAT
EX_CONFIG
EX_DATAERR
EX_IOERR
EX_NOHOST
EX_NOINPUT
EX_NOPERM
EX_NOUSER
EX_OK
EX_OSERR
EX_OSFILE
EX_PROTOCOL
EX_SOFTWARE
EX_TEMPFAIL
EX_UNAVAILABLE
EX_USAGE
F_OK
NGROUPS_MAX
O_APPEND
O_ASYNC
O_CREAT
O_DIRECT
O_DIRECTORY
O_DSYNC
O_EXCL
O_LARGEFILE
O_NDELAY
O_NOATIME
O_NOCTTY
O_NOFOLLOW
O_NONBLOCK
O_RDONLY
O_RDWR
O_RSYNC
O_SYNC
O_TRUNC
O_WRONLY
P_NOWAIT
P_NOWAITO
P_WAIT
R_OK
SEEK_CUR
SEEK_END
SEEK_SET
TMP_MAX
UserDict
WCONTINUED
WCOREDUMP(
WEXITSTATUS(
WIFCONTINUED(
WIFEXITED(
WIFSIGNALED(
WIFSTOPPED(
WNOHANG
WSTOPSIG(
WTERMSIG(
WUNTRACED
W_OK
X_OK
abort(
access(
altsep
chdir(
chmod(
chown(
chroot(
close(
closerange(
confstr(
confstr_names
ctermid(
curdir
defpath
devnull
dup(
dup2(
environ
errno
error(
execl(
execle(
execlp(
execlpe(
execv(
execve(
execvp(
execvpe(
extsep
fchdir(
fchmod(
fchown(
fdatasync(
fdopen(
fork(
forkpty(
fpathconf(
fstat(
fstatvfs(
fsync(
ftruncate(
getcwd(
getcwdu(
getegid(
getenv(
geteuid(
getgid(
getgroups(
getloadavg(
getlogin(
getpgid(
getpgrp(
getpid(
getppid(
getsid(
getuid(
isatty(
kill(
killpg(
lchown(
linesep
link(
listdir(
lseek(
lstat(
major(
makedev(
makedirs(
minor(
mkdir(
mkfifo(
mknod(
name
nice(
openpty(
pardir
path
pathconf(
pathconf_names
pathsep
pipe(
popen(
popen2(
popen3(
popen4(
putenv(
read(
readlink(
remove(
removedirs(
rename(
renames(
rmdir(
sep
setegid(
seteuid(
setgid(
setgroups(
setpgid(
setpgrp(
setregid(
setreuid(
setsid(
setuid(
spawnl(
spawnle(
spawnlp(
spawnlpe(
spawnv(
spawnve(
spawnvp(
spawnvpe(
stat(
stat_float_times(
stat_result(
statvfs(
statvfs_result(
strerror(
symlink(
sysconf(
sysconf_names
system(
tcgetpgrp(
tcsetpgrp(
tempnam(
times(
tmpfile(
tmpnam(
ttyname(
umask(
uname(
unlink(
unsetenv(
urandom(
utime(
wait(
wait3(
wait4(
waitpid(
walk(
write(

--- import os.path ---
os.path.__all__
os.path.__builtins__
os.path.__doc__
os.path.__file__
os.path.__name__
os.path.__package__
os.path.abspath(
os.path.altsep
os.path.basename(
os.path.commonprefix(
os.path.curdir
os.path.defpath
os.path.devnull
os.path.dirname(
os.path.exists(
os.path.expanduser(
os.path.expandvars(
os.path.extsep
os.path.genericpath
os.path.getatime(
os.path.getctime(
os.path.getmtime(
os.path.getsize(
os.path.isabs(
os.path.isdir(
os.path.isfile(
os.path.islink(
os.path.ismount(
os.path.join(
os.path.lexists(
os.path.normcase(
os.path.normpath(
os.path.os
os.path.pardir
os.path.pathsep
os.path.realpath(
os.path.relpath(
os.path.samefile(
os.path.sameopenfile(
os.path.samestat(
os.path.sep
os.path.split(
os.path.splitdrive(
os.path.splitext(
os.path.stat
os.path.supports_unicode_filenames
os.path.walk(
os.path.warnings

--- from os.path import path ---
path.__all__
path.__builtins__
path.__doc__
path.__file__
path.__name__
path.__package__
path.abspath(
path.altsep
path.basename(
path.commonprefix(
path.curdir
path.defpath
path.devnull
path.dirname(
path.exists(
path.expanduser(
path.expandvars(
path.extsep
path.genericpath
path.getatime(
path.getctime(
path.getmtime(
path.getsize(
path.isabs(
path.isdir(
path.isfile(
path.islink(
path.ismount(
path.join(
path.lexists(
path.normcase(
path.normpath(
path.os
path.pardir
path.pathsep
path.realpath(
path.relpath(
path.samefile(
path.sameopenfile(
path.samestat(
path.sep
path.split(
path.splitdrive(
path.splitext(
path.stat
path.supports_unicode_filenames
path.walk(
path.warnings

--- from os.path import * ---
abspath(
basename(
commonprefix(
dirname(
exists(
expanduser(
expandvars(
genericpath
getatime(
getctime(
getmtime(
getsize(
isabs(
isdir(
isfile(
islink(
ismount(
join(
lexists(
normcase(
normpath(
realpath(
relpath(
samefile(
sameopenfile(
samestat(
split(
splitdrive(
splitext(
stat
supports_unicode_filenames
warnings

--- import sys ---
sys.__displayhook__(
sys.__doc__
sys.__excepthook__(
sys.__name__
sys.__package__
sys.__stderr__
sys.__stdin__
sys.__stdout__
sys.api_version
sys.argv
sys.builtin_module_names
sys.byteorder
sys.call_tracing(
sys.callstats(
sys.copyright
sys.displayhook(
sys.dont_write_bytecode
sys.exc_clear(
sys.exc_info(
sys.exc_type
sys.excepthook(
sys.exec_prefix
sys.executable
sys.exit(
sys.flags
sys.float_info
sys.getcheckinterval(
sys.getdefaultencoding(
sys.getdlopenflags(
sys.getfilesystemencoding(
sys.getprofile(
sys.getrecursionlimit(
sys.getrefcount(
sys.getsizeof(
sys.gettrace(
sys.hexversion
sys.maxint
sys.maxsize
sys.maxunicode
sys.meta_path
sys.modules
sys.path
sys.path_hooks
sys.path_importer_cache
sys.platform
sys.prefix
sys.py3kwarning
sys.pydebug
sys.setcheckinterval(
sys.setdlopenflags(
sys.setprofile(
sys.setrecursionlimit(
sys.settrace(
sys.stderr
sys.stdin
sys.stdout
sys.subversion
sys.version
sys.version_info
sys.warnoptions

--- from sys import * ---
__displayhook__(
__excepthook__(
__stderr__
__stdin__
__stdout__
api_version
argv
builtin_module_names
byteorder
call_tracing(
callstats(
copyright
displayhook(
dont_write_bytecode
exc_clear(
exc_info(
exc_type
excepthook(
exec_prefix
executable
flags
float_info
getcheckinterval(
getdefaultencoding(
getdlopenflags(
getfilesystemencoding(
getprofile(
getrecursionlimit(
getrefcount(
getsizeof(
gettrace(
hexversion
maxint
maxsize
maxunicode
meta_path
modules
path_hooks
path_importer_cache
platform
prefix
py3kwarning
pydebug
setcheckinterval(
setdlopenflags(
setprofile(
setrecursionlimit(
settrace(
stderr
stdin
stdout
subversion
version
version_info
warnoptions

--- import datetime ---
datetime.MAXYEAR
datetime.MINYEAR
datetime.__doc__
datetime.__file__
datetime.__name__
datetime.__package__
datetime.date(
datetime.datetime(
datetime.datetime_CAPI
datetime.time(
datetime.timedelta(
datetime.tzinfo(

--- from datetime import * ---
MAXYEAR
MINYEAR
date(
datetime(
datetime_CAPI
time(
timedelta(
tzinfo(

--- import time ---
time.__doc__
time.__name__
time.__package__
time.accept2dyear
time.altzone
time.asctime(
time.clock(
time.ctime(
time.daylight
time.gmtime(
time.localtime(
time.mktime(
time.sleep(
time.strftime(
time.strptime(
time.struct_time(
time.time(
time.timezone
time.tzname
time.tzset(

--- from time import * ---
accept2dyear
altzone
asctime(
clock(
ctime(
daylight
gmtime(
localtime(
mktime(
sleep(
strftime(
strptime(
struct_time(
timezone
tzname
tzset(

--- import logging ---
logging.BASIC_FORMAT
logging.BufferingFormatter(
logging.CRITICAL
logging.DEBUG
logging.ERROR
logging.FATAL
logging.FileHandler(
logging.Filter(
logging.Filterer(
logging.Formatter(
logging.Handler(
logging.INFO
logging.LogRecord(
logging.Logger(
logging.LoggerAdapter(
logging.Manager(
logging.NOTSET
logging.PlaceHolder(
logging.RootLogger(
logging.StreamHandler(
logging.WARN
logging.WARNING
logging.__all__
logging.__author__
logging.__builtins__
logging.__date__
logging.__doc__
logging.__file__
logging.__name__
logging.__package__
logging.__path__
logging.__status__
logging.__version__
logging.addLevelName(
logging.atexit
logging.basicConfig(
logging.cStringIO
logging.codecs
logging.critical(
logging.currentframe(
logging.debug(
logging.disable(
logging.error(
logging.exception(
logging.fatal(
logging.getLevelName(
logging.getLogger(
logging.getLoggerClass(
logging.info(
logging.log(
logging.logMultiprocessing
logging.logProcesses
logging.logThreads
logging.makeLogRecord(
logging.os
logging.raiseExceptions
logging.root
logging.setLoggerClass(
logging.shutdown(
logging.string
logging.sys
logging.thread
logging.threading
logging.time
logging.traceback
logging.types
logging.warn(
logging.warning(

--- from logging import * ---
BASIC_FORMAT
BufferingFormatter(
CRITICAL
FATAL
Filter(
Filterer(
Handler(
LogRecord(
Logger(
LoggerAdapter(
Manager(
NOTSET
PlaceHolder(
RootLogger(
StreamHandler(
WARN
__status__
addLevelName(
atexit
basicConfig(
critical(
disable(
exception(
fatal(
getLevelName(
getLogger(
getLoggerClass(
info(
logMultiprocessing
logProcesses
logThreads
makeLogRecord(
raiseExceptions
root
setLoggerClass(
shutdown(
thread
warning(

--- from dummy_threading import * ---
BoundedSemaphore(
Condition(
Lock(
RLock(
Semaphore(
Thread(
Timer(
activeCount(
active_count(
currentThread(
current_thread(
local(
stack_size(
threading

--- import Queue ---
Queue.Empty(
Queue.Full(
Queue.LifoQueue(
Queue.PriorityQueue(
Queue.Queue(
Queue.__all__
Queue.__builtins__
Queue.__doc__
Queue.__file__
Queue.__name__
Queue.__package__
Queue.deque(
Queue.heapq

--- from Queue import * ---
Empty(
Full(
LifoQueue(
PriorityQueue(
Queue(

--- import StringIO ---
StringIO.EINVAL
StringIO.StringIO(
StringIO.__all__
StringIO.__builtins__
StringIO.__doc__
StringIO.__file__
StringIO.__name__
StringIO.__package__
StringIO.test(

--- from StringIO import * ---
EINVAL

--- import cStringIO ---
cStringIO.InputType(
cStringIO.OutputType(
cStringIO.StringIO(
cStringIO.__doc__
cStringIO.__name__
cStringIO.__package__
cStringIO.cStringIO_CAPI

--- import math ---
math.__doc__
math.__name__
math.__package__
math.acos(
math.acosh(
math.asin(
math.asinh(
math.atan(
math.atan2(
math.atanh(
math.ceil(
math.copysign(
math.cos(
math.cosh(
math.degrees(
math.e
math.exp(
math.fabs(
math.factorial(
math.floor(
math.fmod(
math.frexp(
math.fsum(
math.hypot(
math.isinf(
math.isnan(
math.ldexp(
math.log(
math.log10(
math.log1p(
math.modf(
math.pi
math.pow(
math.radians(
math.sin(
math.sinh(
math.sqrt(
math.tan(
math.tanh(
math.trunc(

--- from math import * ---
acos(
acosh(
asin(
asinh(
atan(
atan2(
atanh(
ceil(
copysign(
cos(
cosh(
degrees(
e
exp(
fabs(
factorial(
floor(
fmod(
frexp(
fsum(
hypot(
isinf(
isnan(
ldexp(
log(
log10(
log1p(
modf(
pi
radians(
sin(
sinh(
sqrt(
tan(
tanh(
trunc(

--- import random ---
random.BPF
random.LOG4
random.NV_MAGICCONST
random.RECIP_BPF
random.Random(
random.SG_MAGICCONST
random.SystemRandom(
random.TWOPI
random.WichmannHill(
random.__all__
random.__builtins__
random.__doc__
random.__file__
random.__name__
random.__package__
random.betavariate(
random.choice(
random.division
random.expovariate(
random.gammavariate(
random.gauss(
random.getrandbits(
random.getstate(
random.jumpahead(
random.lognormvariate(
random.normalvariate(
random.paretovariate(
random.randint(
random.random(
random.randrange(
random.sample(
random.seed(
random.setstate(
random.shuffle(
random.triangular(
random.uniform(
random.vonmisesvariate(
random.weibullvariate(

--- from random import * ---
BPF
LOG4
NV_MAGICCONST
RECIP_BPF
Random(
SG_MAGICCONST
SystemRandom(
TWOPI
WichmannHill(
betavariate(
choice(
expovariate(
gammavariate(
gauss(
getrandbits(
getstate(
jumpahead(
lognormvariate(
normalvariate(
paretovariate(
randint(
random(
randrange(
sample(
seed(
setstate(
shuffle(
triangular(
uniform(
vonmisesvariate(
weibullvariate(

--- import ConfigParser ---
ConfigParser.ConfigParser(
ConfigParser.DEFAULTSECT
ConfigParser.DuplicateSectionError(
ConfigParser.Error(
ConfigParser.InterpolationDepthError(
ConfigParser.InterpolationError(
ConfigParser.InterpolationMissingOptionError(
ConfigParser.InterpolationSyntaxError(
ConfigParser.MAX_INTERPOLATION_DEPTH
ConfigParser.MissingSectionHeaderError(
ConfigParser.NoOptionError(
ConfigParser.NoSectionError(
ConfigParser.ParsingError(
ConfigParser.RawConfigParser(
ConfigParser.SafeConfigParser(
ConfigParser.__all__
ConfigParser.__builtins__
ConfigParser.__doc__
ConfigParser.__file__
ConfigParser.__name__
ConfigParser.__package__
ConfigParser.re

--- from ConfigParser import * ---
ConfigParser(
DEFAULTSECT
DuplicateSectionError(
InterpolationDepthError(
InterpolationError(
InterpolationMissingOptionError(
InterpolationSyntaxError(
MAX_INTERPOLATION_DEPTH
MissingSectionHeaderError(
NoOptionError(
NoSectionError(
ParsingError(
RawConfigParser(
SafeConfigParser(

--- import subprocess ---
subprocess.CalledProcessError(
subprocess.MAXFD
subprocess.PIPE
subprocess.Popen(
subprocess.STDOUT
subprocess.__all__
subprocess.__builtins__
subprocess.__doc__
subprocess.__file__
subprocess.__name__
subprocess.__package__
subprocess.call(
subprocess.check_call(
subprocess.errno
subprocess.fcntl
subprocess.gc
subprocess.list2cmdline(
subprocess.mswindows
subprocess.os
subprocess.pickle
subprocess.select
subprocess.signal
subprocess.sys
subprocess.traceback
subprocess.types

--- from subprocess import * ---
CalledProcessError(
PIPE
Popen(
STDOUT
call(
check_call(
fcntl
gc
list2cmdline(
mswindows
pickle
select
signal

--- import urllib ---
urllib.ContentTooShortError(
urllib.FancyURLopener(
urllib.MAXFTPCACHE
urllib.URLopener(
urllib.__all__
urllib.__builtins__
urllib.__doc__
urllib.__file__
urllib.__name__
urllib.__package__
urllib.__version__
urllib.addbase(
urllib.addclosehook(
urllib.addinfo(
urllib.addinfourl(
urllib.always_safe
urllib.basejoin(
urllib.ftpcache
urllib.ftperrors(
urllib.ftpwrapper(
urllib.getproxies(
urllib.getproxies_environment(
urllib.localhost(
urllib.main(
urllib.noheaders(
urllib.os
urllib.pathname2url(
urllib.proxy_bypass(
urllib.proxy_bypass_environment(
urllib.quote(
urllib.quote_plus(
urllib.reporthook(
urllib.socket
urllib.splitattr(
urllib.splithost(
urllib.splitnport(
urllib.splitpasswd(
urllib.splitport(
urllib.splitquery(
urllib.splittag(
urllib.splittype(
urllib.splituser(
urllib.splitvalue(
urllib.ssl
urllib.string
urllib.sys
urllib.test(
urllib.test1(
urllib.thishost(
urllib.time
urllib.toBytes(
urllib.unquote(
urllib.unquote_plus(
urllib.unwrap(
urllib.url2pathname(
urllib.urlcleanup(
urllib.urlencode(
urllib.urlopen(
urllib.urlretrieve(
urllib.warnings

--- from urllib import * ---
ContentTooShortError(
FancyURLopener(
MAXFTPCACHE
URLopener(
addbase(
addclosehook(
addinfo(
addinfourl(
always_safe
basejoin(
ftpcache
ftperrors(
ftpwrapper(
getproxies(
getproxies_environment(
localhost(
noheaders(
pathname2url(
proxy_bypass(
proxy_bypass_environment(
quote_plus(
reporthook(
socket
splitattr(
splithost(
splitnport(
splitpasswd(
splitport(
splitquery(
splittag(
splittype(
splituser(
splitvalue(
ssl
test1(
thishost(
toBytes(
unquote(
unquote_plus(
unwrap(
url2pathname(
urlcleanup(
urlencode(
urlopen(
urlretrieve(

--- import urllib2 ---
urllib2.AbstractBasicAuthHandler(
urllib2.AbstractDigestAuthHandler(
urllib2.AbstractHTTPHandler(
urllib2.BaseHandler(
urllib2.CacheFTPHandler(
urllib2.FTPHandler(
urllib2.FileHandler(
urllib2.HTTPBasicAuthHandler(
urllib2.HTTPCookieProcessor(
urllib2.HTTPDefaultErrorHandler(
urllib2.HTTPDigestAuthHandler(
urllib2.HTTPError(
urllib2.HTTPErrorProcessor(
urllib2.HTTPHandler(
urllib2.HTTPPasswordMgr(
urllib2.HTTPPasswordMgrWithDefaultRealm(
urllib2.HTTPRedirectHandler(
urllib2.HTTPSHandler(
urllib2.OpenerDirector(
urllib2.ProxyBasicAuthHandler(
urllib2.ProxyDigestAuthHandler(
urllib2.ProxyHandler(
urllib2.Request(
urllib2.StringIO(
urllib2.URLError(
urllib2.UnknownHandler(
urllib2.__builtins__
urllib2.__doc__
urllib2.__file__
urllib2.__name__
urllib2.__package__
urllib2.__version__
urllib2.addinfourl(
urllib2.base64
urllib2.bisect
urllib2.build_opener(
urllib2.ftpwrapper(
urllib2.getproxies(
urllib2.hashlib
urllib2.httplib
urllib2.install_opener(
urllib2.localhost(
urllib2.mimetools
urllib2.os
urllib2.parse_http_list(
urllib2.parse_keqv_list(
urllib2.posixpath
urllib2.quote(
urllib2.random
urllib2.randombytes(
urllib2.re
urllib2.request_host(
urllib2.socket
urllib2.splitattr(
urllib2.splithost(
urllib2.splitpasswd(
urllib2.splitport(
urllib2.splittype(
urllib2.splituser(
urllib2.splitvalue(
urllib2.sys
urllib2.time
urllib2.unquote(
urllib2.unwrap(
urllib2.url2pathname(
urllib2.urlopen(
urllib2.urlparse

--- from urllib2 import * ---
AbstractBasicAuthHandler(
AbstractDigestAuthHandler(
AbstractHTTPHandler(
BaseHandler(
CacheFTPHandler(
FTPHandler(
FileHandler(
HTTPBasicAuthHandler(
HTTPCookieProcessor(
HTTPDefaultErrorHandler(
HTTPDigestAuthHandler(
HTTPError(
HTTPErrorProcessor(
HTTPHandler(
HTTPPasswordMgr(
HTTPPasswordMgrWithDefaultRealm(
HTTPRedirectHandler(
HTTPSHandler(
OpenerDirector(
ProxyBasicAuthHandler(
ProxyDigestAuthHandler(
ProxyHandler(
Request(
URLError(
UnknownHandler(
base64
build_opener(
hashlib
httplib
install_opener(
parse_http_list(
parse_keqv_list(
posixpath
random
randombytes(
request_host(

--- import urlparse ---
urlparse.MAX_CACHE_SIZE
urlparse.ParseResult(
urlparse.ResultMixin(
urlparse.SplitResult(
urlparse.__all__
urlparse.__builtins__
urlparse.__doc__
urlparse.__file__
urlparse.__name__
urlparse.__package__
urlparse.clear_cache(
urlparse.namedtuple(
urlparse.non_hierarchical
urlparse.parse_qs(
urlparse.parse_qsl(
urlparse.scheme_chars
urlparse.test(
urlparse.test_input
urlparse.unquote(
urlparse.urldefrag(
urlparse.urljoin(
urlparse.urlparse(
urlparse.urlsplit(
urlparse.urlunparse(
urlparse.urlunsplit(
urlparse.uses_fragment
urlparse.uses_netloc
urlparse.uses_params
urlparse.uses_query
urlparse.uses_relative

--- from urlparse import * ---
MAX_CACHE_SIZE
ParseResult(
ResultMixin(
SplitResult(
clear_cache(
non_hierarchical
scheme_chars
test_input
urldefrag(
urljoin(
urlparse(
urlunparse(
urlunsplit(
uses_fragment
uses_netloc
uses_params
uses_query
uses_relative

--- import csv ---
csv.Dialect(
csv.DictReader(
csv.DictWriter(
csv.Error(
csv.QUOTE_ALL
csv.QUOTE_MINIMAL
csv.QUOTE_NONE
csv.QUOTE_NONNUMERIC
csv.Sniffer(
csv.StringIO(
csv.__all__
csv.__builtins__
csv.__doc__
csv.__file__
csv.__name__
csv.__package__
csv.__version__
csv.excel(
csv.excel_tab(
csv.field_size_limit(
csv.get_dialect(
csv.list_dialects(
csv.re
csv.reader(
csv.reduce(
csv.register_dialect(
csv.unregister_dialect(
csv.writer(

--- from csv import * ---
Dialect(
DictReader(
DictWriter(
QUOTE_ALL
QUOTE_MINIMAL
QUOTE_NONE
QUOTE_NONNUMERIC
Sniffer(
excel(
excel_tab(
field_size_limit(
get_dialect(
list_dialects(
reader(
register_dialect(
unregister_dialect(
writer(

--- import hmac ---
hmac.HMAC(
hmac.__builtins__
hmac.__doc__
hmac.__file__
hmac.__name__
hmac.__package__
hmac.digest_size
hmac.new(
hmac.trans_36
hmac.trans_5C
hmac.x

--- from hmac import * ---
HMAC(
digest_size
new(
trans_36
trans_5C
x

--- import md5 ---
md5.__builtins__
md5.__doc__
md5.__file__
md5.__name__
md5.__package__
md5.blocksize
md5.digest_size
md5.md5(
md5.new(
md5.warnings

--- from md5 import * ---
blocksize
md5(

--- import sha ---
sha.__builtins__
sha.__doc__
sha.__file__
sha.__name__
sha.__package__
sha.blocksize
sha.digest_size
sha.digestsize
sha.new(
sha.sha(
sha.warnings

--- from sha import * ---
digestsize
sha(

--- import hashlib ---
hashlib.__builtins__
hashlib.__doc__
hashlib.__file__
hashlib.__name__
hashlib.__package__
hashlib.md5(
hashlib.new(
hashlib.sha1(
hashlib.sha224(
hashlib.sha256(
hashlib.sha384(
hashlib.sha512(

--- from hashlib import * ---
sha1(
sha224(
sha256(
sha384(
sha512(
